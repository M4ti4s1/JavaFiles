Guía 3 Java
Ejercicios con estructuras de control iterativas y condicionales
Introducción a la Programación 2024-1 1
PARTE I
Para los siguientes códigos Java indique y explique el o los errores presentes, si los hay, luego corríjalos.

1. Escriba una aplicación que encuentre el menor de varios enteros. Suponga que el primer valor leído especifica la cantidad de valores que el usuario introducirá (dicho valor pudiera ser cero). Si el usuario ingresa un valor negativo se le debe solicitar nuevamente hasta que ingrese un valor no negativo.




2. Escriba distintas versiones de un programa Java que calcule el producto de los enteros impares de 1 al 75.
Cada versión debe usar un ciclo iterativo distinto para el cálculo.



3. Dada la serie:
1/2,1/4,1/6,...,1/2n
Genere hasta el k-ésimo término, tal que este término sea mayor o igual a un valor ingresado por el usuario.
Además, el algoritmo debe ser capaz de:
• Mostrar cada término en la forma presentada arriba, es decir, como una fracción (1/denominador).
• Sumar los términos generados.
• Contar los términos generados.



4. Implemente el Método de Leibnitz-Gregory para calcular una aproximación de pi. Dicho método considera la
serie:
𝜋/ 4 = 1 − 1/3 + 1/5 − 1/7 + 1/9 − 1/11 + ⋯
El programa debe permitir responder estas dos preguntas para cualquier n:
a) ¿Qué valor arroja la serie al considerar los n primeros términos? Pruebe para n = 200.
b) ¿Cuántos términos se requieren para lograr un valor aproximado de pi que comience a tener la precisión



5. Implemente el Método de Fibonacci para calcular otra aproximación de pi. Este método considera la serie:
𝜋/4 = tan^(−1) 1/2 + tan^(−1) 1/5 + tan^(−1) 1/13 + tan^(−1) 1/34 + …

Su solución debe ser capaz de contestar las mismas preguntas del ejercicio anterior.
Nota:
• tan^(−1)x corresponde a arctan(x), es decir, a la función arcotangente.
• Java posee una función que se invoca como Math.atan(x) el cual devuelve el arcotangente de x como un
valor de tipo double.




6. Escriba una aplicación que lea cinco números enteros, cada uno entre 1 y 30, valide que se encuentren en este rango. Por cada número leído, su programa debe mostrar ese número de asteriscos adyacentes. Por ejemplo, si su programa lee el número 7, debe mostrar *******. Muestre las barras de asteriscos después de leer los cinco números.

7. Escriba un programa que muestre, una a continuación de la otra, las figuras siguientes, tal como se presentan. Las únicas instrucciones de salida que se pueden usar son: System.out.print('*'),
System.out.print(' ') y System.out.println()
Tal que se use una única instrucción de cada tipo por cada triángulo, las que pueden ir dentro de un ciclo
iterativo o no, según se requiera.
a.)          b.)          c.)          d.)          
*            **********   **********            *
**           *********     *********           **
***          ********       ********          ***
****         *******         *******         ****
*****        ******           ******        *****
******       *****             *****       ******
*******      ****               ****      *******
********     ***                 ***     ********
*********    **                   **    *********
**********   *                     *   **********


8. Escriba una aplicación que determine los triángulos rectos cuyos lados sean todos valores enteros, tal que el
mayor valor posible sea 500. A los lados de tales triángulos se les llama triples de Pitágoras. El programa
debe mostrar al usuario todos los triples de Pitágoras hallados. Use un ciclo triplemente anidado para
generar y probar todas las combinaciones posibles a fin de mostrar las que cumplan con lo exigido. Este tipo
de soluciones se conocen como de “fuerza bruta”, y aunque los algoritmos, y por ende los programas
correspondientes, deben ser siempre eficientes, en algunas ocasiones no es posible usar más que algoritmos
de fuerza bruta.


9. Escriba una variante del programa definido para el problema 7 tal que 
muestre los triángulos uno al lado del otro.

10. Escriba una variante del programa anterior, de manera que el usuario pueda indicar el tamaño de los
triángulos. Dicho tamaño puede variar entre 1 y 30, el cual debe ser validado solicitando al usuario ingrese
nuevamente en caso de error hasta que el valor sea válido.


11. Escriba un programa Java que calcule el Coeficiente Binomial C(n,k). Este valor corresponde al número de
subconjuntos de k elementos escogidos de un conjunto con n elementos. Para realizar el cálculo se emplea la
siguiente fórmula:
𝐶(𝑛, 𝑘) = (𝑛 𝑘) = 𝑛!/(𝑘! (𝑛 − 𝑘)!)
Los valores de n y k deben ser proporcionados por el usuario, tal que k > 0 y k <=n. Si los valores ingresados
no cumplen con lo anterior no se debe realizar el cálculo, sino desplegar un mensaje al usuario indicando
cuál es el problema con el o los datos de entrada. Sea preciso con el mensaje.
Note que: (n-k)! != n! – k!
Por ejemplo, si n=6 y k=2, entonces:
(n – k)! = (6 – 2)! = 4! = 24
n! – k! = 6! – 2! = 720 – 2 = 718
12. Escriba una variante del programa definido para el problema anterior, tal que permita a un usuario calcular
uno o más coeficientes binomiales, según lo que requiera. Determine usted el modo en que permitirá al
usuario realizar lo indicado.